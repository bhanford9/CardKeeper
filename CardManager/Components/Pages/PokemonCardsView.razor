@* Usings *@
@using CardManager.Models.Grading
@using CardManager.Components.Pages.Modals
@using CardManager.ViewModels.PokemonCollectionViewModels


@inherits BaseView<IPokemonCollectionViewModel>

<h2>@ViewModel.CollectionName</h2>

<div class="card-grid-container">
    <Grid @ref="cardsGrid"
          TItem="IPokemonCardViewModel"
          Class="table table-hover table-responsive table-sm"
          DataProvider="@ViewModel.CardsDataProvider"
          OnRowDoubleClick="@ViewModel.CardRowDoubleClicked"
          SelectedItemsChanged="@ViewModel.OnSelectedCardsChanged"
          FixedHeader="true"
          AllowSorting="true"
          AllowRowClick="true"
          AllowSelection="true"
          AllowPaging="false"
          ItemsPerPageText=""
          Responsive="true"
          PaginationItemsTextFormat=""
          PageSizeSelectorItems="pageSizeSelectors"
          SelectionMode="GridSelectionMode.Multiple">
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Name" PropertyName="Name" SortKeySelector="card => card.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="#" PropertyName="Number">
            @context.Number
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Year" PropertyName="CreationYear">
            @context.CreationYear
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Storage">
            <div>@context.StorageMedia</div>
            <div>@context.StorageLocation</div>
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Grade" PropertyName="Grading">
            @context.Grading
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Series" PropertyName="Series">
            @context.Series
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Rarity" PropertyName="Rarity">
            @context.Rarity
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Holo" PropertyName="Holographic">
            @context.Holographic
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="Type" PropertyName="Type">
            @context.Type
        </GridColumn>
        <GridColumn TItem="IPokemonCardViewModel" HeaderText="$$" PropertyName="MonetaryData" SortKeySelector="card => card.MonetaryData.MavinViewModel.AveragePrice">
            <div>Min: $@context.MonetaryData.MavinViewModel.MinPrice</div>
            <div>Avg: $@context.MonetaryData.MavinViewModel.AveragePrice</div>
            <div>Max: $@context.MonetaryData.MavinViewModel.MaxPrice</div>
        </GridColumn>
    </Grid>

    <ConfirmDialog @ref="dialog" />
    <EditCardModal @ref="editCardModal"></EditCardModal>

    <div class="@(ViewModel.CanCreateCards ? "card-table-buttons" : "card-table-buttons-limited")">
        <Button Class="card-table-button card-add-button"
                Color="ButtonColor.Primary"
                Size="Size.Small"
                hidden="@(!ViewModel.CanCreateCards)"
                @onclick="() => ViewModel.AddCard()">
            Add Card
        </Button>
        <Button Class="card-table-button card-save-button" Color="ButtonColor.Primary" Size="Size.Small" @onclick="ViewModel.SaveTable">Save</Button>
        <Dropdown Class="card-table-button card-actions-button" Size="Size.Small">
            <DropdownToggleButton Color="ButtonColor.Primary">Selected Actions</DropdownToggleButton>
            <DropdownMenu>
                <DropdownItem Type="ButtonType.Button"
                              Disabled="@(ViewModel.Cards.Count(c => c.IsSelected) != 1)"
                              @onclick="ViewModel.DuplicateSelectedCard">
                    Duplicate
                </DropdownItem>
                <DropdownItem Type="ButtonType.Button"
                              Disabled="@(ViewModel.Cards.Count(c => c.IsSelected) != 1)"
                              @onclick="ViewModel.DeleteSelectedCard">
                    Delete
                </DropdownItem>
                <DropdownItem Type="ButtonType.Button"
                              Disabled="@(ViewModel.Cards.Count(c => c.IsSelected) <= 0)"
                              @onclick="ViewModel.RetrieveAppraisals">
                    Retrieve Appraisals
                </DropdownItem>
                <DropdownItem Type="ButtonType.Button"
                              Style="width: 200px!important; height: 32px;"
                              Disabled="@(ViewModel.Cards.Count(c => c.IsSelected) <= 0)"
                              @onmouseover="(() => ViewModel.ShowCollections(true))"
                              @onmouseleave="(() => ViewModel.ShowCollections(false))">
                    <div class="flex-container">
                        <label class="flex-child-6">Add to Collection</label>
                        <label class="flex-child-1 align-right">></label>
                    </div>

                    @if (ViewModel.CollectionsVisible && ViewModel.CustomCollections.Count > 0)
                    {
                        <div class="card collections-sub-dropdown">
                            <ul class="list-group list-group-flush">
                                @foreach (var c in ViewModel.CustomCollections)
                                {
                                    <li class="list-group-item small-list-item"
                                        @onclick="() => ViewModel.AddToCollection(c.Value)">
                                        @c.Key
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </DropdownItem>
            </DropdownMenu>
        </Dropdown>
        <div class="card-list-summary-container">
            <label>Total Cards: @ViewModel.Cards.Count</label>
        </div>
    </div>

    <div class="card-stats-container flex-container">
        <div class="stat-row-title-container flex-child-2 flex-container-col">
            <div class="stat-header flex-child-1">Source</div>
            <div class="stat-row-title flex-child-1">Mavin</div>
        </div>
        <div class="card-averages-container flex-container-col flex-child-5">
            <div class="stat-header flex-child-1">Averages</div>
            <div class="stats flex-container flex-child-3">
                <div class="stat-item flex-container flex-child-1">
                    <label class="flex-child-1">Min:</label>
                    <div class="flex-child-3">$@ViewModel.AverageMin</div>
                </div>
                <div class="stat-item flex-container flex-child-1">
                    <label class="flex-child-1">Avg:</label>
                    <div class="flex-child-3">$@ViewModel.AverageAverage</div>
                </div>
                <div class="stat-item flex-container flex-child-1">
                    <label class="flex-child-1">Max:</label>
                    <div class="flex-child-3">$@ViewModel.AverageMax</div>
                </div>
            </div>
        </div>
        <div class="card-totals-container flex-container-col flex-child-5">
            <div class="stat-header flex-child-1">Totals</div>
            <div class="stats flex-container flex-child-3">
                <div class="stat-item flex-container flex-child-1">
                    <label class="flex-child-1">Min:</label>
                    <div class="flex-child-3">$@ViewModel.TotalMin</div>
                </div>
                <div class="stat-item flex-container flex-child-1">
                    <label class="flex-child-1">Avg:</label>
                    <div class="flex-child-3">$@ViewModel.TotalAverage</div>
                </div>
                <div class="stat-item flex-container flex-child-1">
                    <label class="flex-child-1">Max:</label>
                    <div class="flex-child-3">$@ViewModel.TotalMax</div>
                </div>
            </div>
        </div>
    </div>
</div>


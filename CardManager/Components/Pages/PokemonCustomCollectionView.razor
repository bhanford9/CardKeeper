@* Usings *@
@using CardManager.Models.Grading
@using CardManager.Components.Pages.Modals
@using CardManager.ViewModels.PokemonCollectionViewModels

@inherits BaseView<IPokemonCustomCollectionViewModel>

<div class="custom-collections-container">
    <div class="custom-collections-controls">
        <Dropdown Size="Size.Small">
            <DropdownToggleButton Color="ButtonColor.Primary">Collections</DropdownToggleButton>
            <DropdownMenu>
                @foreach (var collection in ViewModel.CustomCollections)
                {
                    <DropdownItem Type="ButtonType.Button"
                                  @onclick="() => ViewModel.DisplayCollection(collection.Key)">
                        @collection.Key
                    </DropdownItem>
                }
            </DropdownMenu>
        </Dropdown>
        <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="() => newCollectionModal.ShowAsync()">New Collection</Button>
        <Modal @ref="newCollectionModal" Title="Add New Collection" OnHidden="@ViewModel.OnCollectionModalHidden">
            <BodyTemplate>
                <label>Collection Name:</label>
                <InputText @bind-Value="@ViewModel.NewCollectionName" />
                @if (ViewModel.CollectionNameUnavailable)
                {
                    <Alert Color="AlertColor.Danger">@ViewModel.CollectionNameError</Alert>
                }
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary"
                        @onclick="() => newCollectionModal.HideAsync()">
                    Cancel
                </Button>
                <Button Color="ButtonColor.Primary"
                        @onclick="@ViewModel.CreateCollection">
                    Create
                </Button>
            </FooterTemplate>
        </Modal>
    </div>

    <PokemonCardsView @ref="cardsView" ViewModel="@ViewModel" />
</div>

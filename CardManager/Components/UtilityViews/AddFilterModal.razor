@using CardManager.Components.Pages
@using CardManager.ViewModels.PokemonCollectionViewModels.Filtering.FilterCriteria
@using CardManager.ViewModels.UtilityViewModels;
@using CardManager.ViewModels.UtilityViewModels.Filtering

@inherits BaseInjectView<IAddFilterViewModel>

<Modal @ref="filterModal">
    <HeaderTemplate>
        Add Filter
    </HeaderTemplate>
    <BodyTemplate>
        <div class="container">
            <div class="row">
                <div class="col-auto">Filter On:</div>
                <Dropdown Class="col-auto" Size="Size.Small">
                    <DropdownToggleButton Color="ButtonColor.Primary">
                        @(ViewModel.SelectedFilterCriteria == null ? "" : ViewModel.SelectedFilterCriteria.Name)
                    </DropdownToggleButton>
                    <DropdownMenu>
                        @foreach (var filterCriteria in ViewModel.FilterCriteria)
                        {
                            <DropdownItem Type="ButtonType.Button"
                                          @onclick="@(() => @ViewModel.SelectFilterCriteria(filterCriteria))">
                                @filterCriteria.Name
                            </DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </div>


            @if (ViewModel.SelectedFilterCriteria is IFilterCriteria)
            {
                <div class="row">
                    <div class="col-auto">Where:</div>
                    <Dropdown Class="col-auto" Size="Size.Small">
                        <DropdownToggleButton Color="ButtonColor.Primary">
                            @(ViewModel.SelectedFilterCriteria == null || ViewModel.SelectedFilterCriteria.SelectedEvaluation == null
                                ? ""
                                : ViewModel.SelectedFilterCriteria.SelectedEvaluation.Name)
                        </DropdownToggleButton>
                        <DropdownMenu>
                            @foreach (var evaluation in ViewModel.SelectedFilterCriteria.Evaluations)
                            {
                                <DropdownItem Type="ButtonType.Button"
                                              @onclick="@(() => @ViewModel.SelectedFilterCriteria.SelectEvaluation(evaluation))">
                                    @evaluation.Name
                                </DropdownItem>
                            }
                        </DropdownMenu>
                    </Dropdown>
                </div>

                @if (ViewModel.SelectedFilterCriteria != null && ViewModel.SelectedFilterCriteria.SelectedEvaluation != null)
                {
                    <div class="row">
                        <div class="col-auto">Value:</div>
                        @if (ViewModel.SelectedFilterCriteria.Type == FilterCriteriaType.String)
                        {
                            <InputText class="col-auto" @bind-Value="@ViewModel.StringComparison" />
                        }
                        @if (ViewModel.SelectedFilterCriteria.Type == FilterCriteriaType.Integer)
                        {
                            <InputNumber class="col-auto" TValue="int" @bind-Value="@ViewModel.IntegerComparison" />
                        }
                    </div>

                    <div class="row">
                        <div class="col-auto">Result:</div>

                        <div class="col-auto">TBD</div>
                    </div>
                }
            }
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" Size="Size.Small" @onclick="() => ViewModel.ApplyFilter()">
            Apply
        </Button>
    </FooterTemplate>
</Modal>